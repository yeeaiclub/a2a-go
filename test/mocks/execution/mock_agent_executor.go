// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yumosx/a2a-go/sdk/server/execution (interfaces: AgentExecutor)
//
// Generated by this command:
//
//	mockgen -destination=test/mocks/execution/mock_agent_executor.go -package=execution github.com/yumosx/a2a-go/sdk/server/execution AgentExecutor
//

// Package execution is a generated GoMock package.
package execution

import (
	context "context"
	reflect "reflect"

	event "github.com/yumosx/a2a-go/sdk/server/event"
	execution "github.com/yumosx/a2a-go/sdk/server/execution"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentExecutor is a mock of AgentExecutor interface.
type MockAgentExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockAgentExecutorMockRecorder
	isgomock struct{}
}

// MockAgentExecutorMockRecorder is the mock recorder for MockAgentExecutor.
type MockAgentExecutorMockRecorder struct {
	mock *MockAgentExecutor
}

// NewMockAgentExecutor creates a new mock instance.
func NewMockAgentExecutor(ctrl *gomock.Controller) *MockAgentExecutor {
	mock := &MockAgentExecutor{ctrl: ctrl}
	mock.recorder = &MockAgentExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentExecutor) EXPECT() *MockAgentExecutorMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockAgentExecutor) Cancel(ctx context.Context, requestContext *execution.RequestContext, queue *event.Queue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, requestContext, queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockAgentExecutorMockRecorder) Cancel(ctx, requestContext, queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockAgentExecutor)(nil).Cancel), ctx, requestContext, queue)
}

// Execute mocks base method.
func (m *MockAgentExecutor) Execute(ctx context.Context, reqContext *execution.RequestContext, queue *event.Queue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, reqContext, queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockAgentExecutorMockRecorder) Execute(ctx, reqContext, queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAgentExecutor)(nil).Execute), ctx, reqContext, queue)
}
