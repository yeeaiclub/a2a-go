// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yumosx/a2a-go/sdk/server/event (interfaces: QueueManager)
//
// Generated by this command:
//
//	mockgen -destination=test/mocks/event/mock_queue_manager.go -package=event github.com/yumosx/a2a-go/sdk/server/event QueueManager
//

// Package event is a generated GoMock package.
package event

import (
	context "context"
	reflect "reflect"

	event "github.com/yumosx/a2a-go/sdk/server/event"
	gomock "go.uber.org/mock/gomock"
)

// MockQueueManager is a mock of QueueManager interface.
type MockQueueManager struct {
	ctrl     *gomock.Controller
	recorder *MockQueueManagerMockRecorder
	isgomock struct{}
}

// MockQueueManagerMockRecorder is the mock recorder for MockQueueManager.
type MockQueueManagerMockRecorder struct {
	mock *MockQueueManager
}

// NewMockQueueManager creates a new mock instance.
func NewMockQueueManager(ctrl *gomock.Controller) *MockQueueManager {
	mock := &MockQueueManager{ctrl: ctrl}
	mock.recorder = &MockQueueManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueManager) EXPECT() *MockQueueManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockQueueManager) Add(ctx context.Context, taskId string, queue *event.Queue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, taskId, queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockQueueManagerMockRecorder) Add(ctx, taskId, queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockQueueManager)(nil).Add), ctx, taskId, queue)
}

// Close mocks base method.
func (m *MockQueueManager) Close(ctx context.Context, taskId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueueManagerMockRecorder) Close(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueueManager)(nil).Close), ctx, taskId)
}

// CreateOrTap mocks base method.
func (m *MockQueueManager) CreateOrTap(ctx context.Context, taskId string) (*event.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrTap", ctx, taskId)
	ret0, _ := ret[0].(*event.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrTap indicates an expected call of CreateOrTap.
func (mr *MockQueueManagerMockRecorder) CreateOrTap(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrTap", reflect.TypeOf((*MockQueueManager)(nil).CreateOrTap), ctx, taskId)
}

// Get mocks base method.
func (m *MockQueueManager) Get(ctx context.Context, taskId string) (*event.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, taskId)
	ret0, _ := ret[0].(*event.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueueManagerMockRecorder) Get(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueueManager)(nil).Get), ctx, taskId)
}

// Tap mocks base method.
func (m *MockQueueManager) Tap(ctx context.Context, taskId string) (*event.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tap", ctx, taskId)
	ret0, _ := ret[0].(*event.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tap indicates an expected call of Tap.
func (mr *MockQueueManagerMockRecorder) Tap(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tap", reflect.TypeOf((*MockQueueManager)(nil).Tap), ctx, taskId)
}
