// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yumosx/a2a-go/sdk/server/tasks (interfaces: TaskStore)
//
// Generated by this command:
//
//	mockgen -destination=test/mocks/tasks/mock_task_store.go -package=tasks github.com/yumosx/a2a-go/sdk/server/tasks TaskStore
//

// Package tasks is a generated GoMock package.
package tasks

import (
	context "context"
	reflect "reflect"

	types "github.com/yeeaiclub/a2a-go/sdk/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskStore is a mock of TaskStore interface.
type MockTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreMockRecorder
	isgomock struct{}
}

// MockTaskStoreMockRecorder is the mock recorder for MockTaskStore.
type MockTaskStoreMockRecorder struct {
	mock *MockTaskStore
}

// NewMockTaskStore creates a new mock instance.
func NewMockTaskStore(ctrl *gomock.Controller) *MockTaskStore {
	mock := &MockTaskStore{ctrl: ctrl}
	mock.recorder = &MockTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStore) EXPECT() *MockTaskStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTaskStore) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskStoreMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskStore)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockTaskStore) Get(ctx context.Context, taskId string) (*types.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, taskId)
	ret0, _ := ret[0].(*types.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskStoreMockRecorder) Get(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskStore)(nil).Get), ctx, taskId)
}

// Save mocks base method.
func (m *MockTaskStore) Save(ctx context.Context, task *types.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTaskStoreMockRecorder) Save(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaskStore)(nil).Save), ctx, task)
}
